# FluentBuilders.Text - Continuous Integration Workflow
# Validates code quality, security, tests, and performance
# Based on CODE_RULES.md standards

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # ==================== CODE QUALITY ====================
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./csharp

      - name: Security - Vulnerable Packages
        run: dotnet list package --vulnerable --include-transitive
        working-directory: ./csharp
        continue-on-error: true

      - name: Code Quality - Format Check
        run: dotnet format --verify-no-changes --verbosity diagnostic
        working-directory: ./csharp

      - name: Code Quality - Build with Analyzers
        run: dotnet build --no-restore --configuration Release /p:TreatWarningsAsErrors=true
        working-directory: ./csharp

  # ==================== TESTING ====================
  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./csharp

      - name: Run Unit Tests
        run: |
          dotnet test \
            --no-restore \
            --configuration Release \
            --logger "trx;LogFileName=test-results.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        working-directory: ./csharp

      - name: Code Coverage Report
        uses: codecov/codecov-action@v5
        with:
          files: ./csharp/coverage/**/coverage.opencover.xml
          fail_ci_if_error: true
          verbose: true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ./csharp/**/test-results.trx

  # ==================== MULTI-PLATFORM ====================
  test-matrix:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: quality

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore & Test
        run: dotnet test --configuration Release
        working-directory: ./csharp

  # ==================== PERFORMANCE ====================
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run Benchmarks
        run: |
          if [ -d "benchmarks" ]; then
            dotnet run --project benchmarks --configuration Release
          else
            echo "No benchmarks project found, skipping..."
          fi
        working-directory: ./csharp

  # ==================== PACKAGE BUILD ====================
  package:
    name: Build NuGet Package
    runs-on: ubuntu-latest
    needs: [test, test-matrix]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Pack NuGet
        run: dotnet pack --configuration Release --output ./artifacts
        working-directory: ./csharp

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ./csharp/artifacts/*.nupkg

  # ==================== PROJECT QUALITY ====================
  project-quality:
    name: Project Quality Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Validate Project Structure
        run: |
          if [ -f "../scripts/validate-project-quality.py" ]; then
            python3 ../scripts/validate-project-quality.py . --verbose
          else
            echo "Validation script not found, skipping..."
          fi
        working-directory: ./csharp

  # ==================== SUMMARY ====================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, test-matrix, package, project-quality]
    if: success()

    steps:
      - name: CI Passed
        run: echo "âœ… All CI checks passed successfully!"
